// Battery data processing pipeline
pipeline BatteryPipeline { 

    // Step 1: Extract battery data from the specified URL
    block BatteryExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    } 
    
    // Step 2: Interpret the downloaded file as a ZIP archive
    block BatteryArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    } 
    
    // Step 3: Pick the battery data file from the extracted contents
    block BatteryFilePicker oftype FilePicker {
        path: "/data.csv"; 
    }

    // Step 4: Interpret the battery data file as a plain text file
    block BatteryFileInterpreter oftype TextFileInterpreter{

    }
     
    // Step 5: Interpret the battery data file as a CSV file
    block BatteryCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }
    
    // Step 6: Rename the 'Temperatur' cell header to match the desired column name
    block RenameTemperaturCellWriter oftype CellWriter {
        at: cell E1;
        write: ["Temperatur"]; 
    }

    // Step 7: Rename the 'Batterietemperatur' cell header to match the desired column name
    block RenameTemperaturBatteryCellWriter oftype CellWriter {
        at: cell J1;
        write: ["Batterietemperatur"]; 
    }  

    // Step 8: Interpret the battery data as a table with specified columns and constraints
    block BatterieTableInterpreter oftype TableInterpreter { 
        header: true;
        columns: [
            "Geraet" oftype ValidGeraetNumber,
            "Hersteller" oftype text, 
            "Model" oftype text, 
            "Monat" oftype integer, 
            "Temperatur" oftype decimal, 
            "Batterietemperatur" oftype decimal, 
            "Geraet aktiv" oftype text, 
        ];
    } 
     
    // Step 9: Define transformation to convert Celsius to Fahrenheit
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 1.8) + 32;
    } 

    // Step 10: Apply temperature conversion to the 'Temperatur' column
    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['Temperatur'];
        outputColumn: 'Temperatur';
        use: CelsiusToFahrenheit;
    }

    // Step 11: Apply temperature conversion to the 'Batterietemperatur' column
    block CelsiusToFahrenheitBatteryTransformer oftype TableTransformer {
        inputColumns: ['Batterietemperatur'];
        outputColumn: 'Batterietemperatur';
        use: CelsiusToFahrenheit;
    } 

    // Constraint: Ensure 'Geraet' (Device) numbers are valid positive integers
    constraint ValidGeraetNumberRange on decimal:
        value > 0;

    // Define a valid Geraet (Device) number as an integer with the specified constraints
    valuetype ValidGeraetNumber oftype integer {
        constraints: [ ValidGeraetNumberRange ];
    } 
    
    // Step 12: Load the processed battery data into an SQLite table
    block BatterieLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    } 

    // Pipeline execution order
    BatteryExtractor 
    -> BatteryArchiveInterpreter
    -> BatteryFilePicker
    -> BatteryFileInterpreter
    -> BatteryCSVInterpreter
    -> RenameTemperaturCellWriter
    -> RenameTemperaturBatteryCellWriter
    -> BatterieTableInterpreter
    -> CelsiusToFahrenheitTransformer
    -> CelsiusToFahrenheitBatteryTransformer
    -> BatterieLoader;

} 
