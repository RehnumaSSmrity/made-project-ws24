// Define constraints
constraint VerkehrListe oftype AllowlistConstraint {
    allowlist: ["FV", "RV", "nur DPN"];
}

constraint Geographic oftype RangeConstraint {
    lowerBound: -90;
    upperBound: 90;
    lowerBoundInclusive: true;
    upperBoundInclusive: true;
}

constraint IFOPTRegEx oftype RegexConstraint {
    regex: /[a-z]{2}:\d+:\d+(:\d+)?/;
}

// Define value types
valuetype VerkehrType oftype text {
    constraints: [VerkehrListe];
}

valuetype GeographicType oftype decimal {
    constraints: [Geographic];
}

valuetype IFOPTType oftype text {
    constraints: [IFOPTRegEx];
}

// Define the pipeline for processing train stops data
pipeline TrainsstopPipeline {
    // Extract, interpret, and transform data
    block DataExtractor oftype HttpExtractor {url: "https://download-data.deutschebahn.com/static/datasets/haltestellen/D_Bahnhof_2020_alle.CSV"; }
    block TrainsstopTextFileInterpreter oftype TextFileInterpreter {}
    block TrainsstopCSVInterpreter oftype CSVInterpreter {enclosing: '"'; delimiter: ";";}
    block DropColumn oftype ColumnDeleter { delete: [column J]; }
   
    // Interpret the table structure with specified columns and data types
    block TrainsstopTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "EVA_NR" oftype integer,
            "DS100" oftype text,
            "IFOPT" oftype IFOPTType,
            "NAME" oftype text,
            "Verkehr" oftype VerkehrType,
            "Laenge" oftype GeographicType,
            "Breite" oftype GeographicType,
            "Betreiber_Name" oftype text,
            "Betreiber_Nr" oftype integer,
        ];
    }

    // Load the interpreted data into an SQLite database
    block DatabaseLoader oftype SQLiteLoader { table: "trainstops"; file: "./trainstops.sqlite"; }

    // Define the data flow within the pipeline
    DataExtractor
        -> TrainsstopTextFileInterpreter
        -> TrainsstopCSVInterpreter
        -> DropColumn
        -> TrainsstopTableInterpreter
        -> DatabaseLoader;
}
